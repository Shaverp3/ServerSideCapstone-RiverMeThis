// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiverMeThis.Data;

namespace RiverMeThis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200929150408_InitialDBSetup")]
    partial class InitialDBSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RiverMeThis.Models.AccessPoint", b =>
                {
                    b.Property<int>("AccessPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("APIndex")
                        .HasColumnType("int");

                    b.Property<string>("ClassRapids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.HasKey("AccessPointId");

                    b.HasIndex("RiverId");

                    b.ToTable("AccessPoint");

                    b.HasData(
                        new
                        {
                            AccessPointId = 1,
                            APIndex = 1,
                            ClassRapids = "I",
                            Location = "Whitesville, WV",
                            Name = "Whitesville Public Access",
                            RiverId = 1
                        },
                        new
                        {
                            AccessPointId = 2,
                            APIndex = 2,
                            ClassRapids = "I",
                            Location = "Orgas, WV",
                            Name = "JM Protan Community Center Public Access",
                            RiverId = 1
                        },
                        new
                        {
                            AccessPointId = 3,
                            APIndex = 1,
                            ClassRapids = "I",
                            Location = "Madison, WV",
                            Name = "Madison City Park Public Access",
                            RiverId = 2
                        },
                        new
                        {
                            AccessPointId = 4,
                            APIndex = 2,
                            ClassRapids = "I",
                            Location = "Danville, WV",
                            Name = "Danville Community Center Public Access",
                            RiverId = 2
                        },
                        new
                        {
                            AccessPointId = 5,
                            APIndex = 1,
                            ClassRapids = "I",
                            Location = "Alum Creek, WV",
                            Name = "Lock 4 Launch",
                            RiverId = 3
                        },
                        new
                        {
                            AccessPointId = 6,
                            APIndex = 2,
                            ClassRapids = "I",
                            Location = "Alum Creek, WV",
                            Name = "Lions Park Public Access",
                            RiverId = 3
                        },
                        new
                        {
                            AccessPointId = 7,
                            APIndex = 1,
                            ClassRapids = "II",
                            Location = "Sutton, WV",
                            Name = "Sutton Dam Tailwaters",
                            RiverId = 4
                        },
                        new
                        {
                            AccessPointId = 8,
                            APIndex = 2,
                            ClassRapids = "II",
                            Location = "Sutton, WV",
                            Name = "Cafe Cimino",
                            RiverId = 4
                        },
                        new
                        {
                            AccessPointId = 9,
                            APIndex = 1,
                            ClassRapids = "I",
                            Location = "Mullens, WV",
                            Name = "Three Mile Curve Access",
                            RiverId = 5
                        },
                        new
                        {
                            AccessPointId = 10,
                            APIndex = 2,
                            ClassRapids = "I",
                            Location = "Stollings, WV",
                            Name = "U.S. Post Office Access",
                            RiverId = 5
                        },
                        new
                        {
                            AccessPointId = 11,
                            APIndex = 3,
                            ClassRapids = "I",
                            Location = "Julian, WV",
                            Name = "Donald Kuhn Juvenile Center Public Access",
                            RiverId = 2
                        },
                        new
                        {
                            AccessPointId = 12,
                            APIndex = 4,
                            ClassRapids = "I",
                            Location = "Julian, WV",
                            Name = "Big Earl's Campground",
                            RiverId = 2
                        });
                });

            modelBuilder.Entity("RiverMeThis.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8fb91fa-9459-4c71-8445-f8c6fc39c86c",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMgZdMB7al2p9G+29d0GKcE3T8yRUlJQLehQbAy6nfPBnO8qHGeWapl4HtKmXPh6nA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            StreetAddress = "123 Infinity Way",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("RiverMeThis.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.ToTable("Device");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            Type = "Inner Tube/Pool Float"
                        },
                        new
                        {
                            DeviceId = 2,
                            Type = "Kayak/Canoe"
                        },
                        new
                        {
                            DeviceId = 3,
                            Type = "S.U.P."
                        });
                });

            modelBuilder.Entity("RiverMeThis.Models.FloatTrip", b =>
                {
                    b.Property<int>("FloatTripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedASherpa")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfFloaters")
                        .HasColumnType("int");

                    b.Property<string>("PicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PutInAPId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SherpaId")
                        .HasColumnType("int");

                    b.Property<int?>("TakeOutAPId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FloatTripId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PutInAPId");

                    b.HasIndex("RiverId");

                    b.HasIndex("SherpaId");

                    b.HasIndex("TakeOutAPId");

                    b.HasIndex("UserId");

                    b.ToTable("FloatTrip");
                });

            modelBuilder.Entity("RiverMeThis.Models.River", b =>
                {
                    b.Property<int>("RiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MapPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumAPs")
                        .HasColumnType("int");

                    b.Property<float>("TotalLength")
                        .HasColumnType("real");

                    b.HasKey("RiverId");

                    b.ToTable("River");

                    b.HasData(
                        new
                        {
                            RiverId = 1,
                            MapPath = "CoalRiverWaterTrailMap.jpg",
                            Name = "Big Coal to Coal River",
                            NumAPs = 12,
                            TotalLength = 60f
                        },
                        new
                        {
                            RiverId = 2,
                            MapPath = "CoalRiverWaterTrailMap.jpg",
                            Name = "Little Coal to Coal River",
                            NumAPs = 14,
                            TotalLength = 47f
                        },
                        new
                        {
                            RiverId = 3,
                            MapPath = "CoalRiverWaterTrailMap.jpg",
                            Name = "Coal River",
                            NumAPs = 6,
                            TotalLength = 20f
                        },
                        new
                        {
                            RiverId = 4,
                            MapPath = "ElkRiverWaterTrailMap.jpg",
                            Name = "Elk River",
                            NumAPs = 17,
                            TotalLength = 172f
                        },
                        new
                        {
                            RiverId = 5,
                            MapPath = "GyandotteRiverTrailMap.jpg",
                            Name = "Gyandotte River",
                            NumAPs = 24,
                            TotalLength = 166f
                        });
                });

            modelBuilder.Entity("RiverMeThis.Models.Sherpa", b =>
                {
                    b.Property<int>("SherpaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SherpaId");

                    b.ToTable("Sherpa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RiverMeThis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RiverMeThis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiverMeThis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RiverMeThis.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiverMeThis.Models.AccessPoint", b =>
                {
                    b.HasOne("RiverMeThis.Models.River", "River")
                        .WithMany("AvailableAPs")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiverMeThis.Models.FloatTrip", b =>
                {
                    b.HasOne("RiverMeThis.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("RiverMeThis.Models.AccessPoint", "PutInAP")
                        .WithMany()
                        .HasForeignKey("PutInAPId");

                    b.HasOne("RiverMeThis.Models.River", "River")
                        .WithMany()
                        .HasForeignKey("RiverId");

                    b.HasOne("RiverMeThis.Models.Sherpa", "Sherpa")
                        .WithMany("AssignedFloats")
                        .HasForeignKey("SherpaId");

                    b.HasOne("RiverMeThis.Models.AccessPoint", "TakeOutAP")
                        .WithMany()
                        .HasForeignKey("TakeOutAPId");

                    b.HasOne("RiverMeThis.Models.ApplicationUser", "User")
                        .WithMany("FloatTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
